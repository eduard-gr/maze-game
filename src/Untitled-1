
#include "maze.hpp"


int main(int argc, char *argv[])
{

	Maze maze = {
		"Test",
		{
			{'@', '@', '@', '@', '@', '@', '@', '@', '@', '@'},
			{'@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@'},
			{'@', '@', '@', '@', '@', '@', '@', ' ', ' ', '@'},
			{'@', '@', '@', '@', '@', '@', '@', ' ', '@', '@'},
			{'@', '@', ' ', ' ', ' ', ' ', '@', ' ', '@', '@'},
			{'@', '@', '@', ' ', '@', '@', '@', ' ', '@', '@'},
			{'@', '@', '@', ' ', '@', '@', ' ', ' ', '@', '@'},
			{'@', '@', '@', ' ', '@', ' ', ' ', '@', '@', '@'},
			{'@', ' ', ' ', ' ', ' ', ' ', '@', '@', '@', '@'},
			{'@', '@', '@', '@', '@', '@', '@', '@', '@', '@'}
		}
	};

	initscr();
	keypad(stdscr, TRUE);
	noecho();
	curs_set(FALSE);

	refresh();
	
	WINDOW *maze_window = newwin(
		MAZE_SIZE_HEIGHT,
		MAZE_SIZE_WIDTH,
		0,
		0);
	
	int x = 1;
	int y = 1;

	draw_maze(maze_window, &maze);
	mvwaddch(maze_window, y, x, PLAYER);
	wrefresh(maze_window);

	while(1) {
		//getmaxyx(stdscr, my, mx);
		
		int ch = getch();
		if(ch == KEY_LEFT) {
			if(x <= 0) {
				continue;
			}

			mvwaddch(maze_window, y, x, maze.map[y][x]);
			x--;
			mvwaddch(maze_window, y, x, PLAYER);
		}else if(ch == KEY_RIGHT) {
			if(x >= MAZE_SIZE_WIDTH - 1) {
				continue;
			}

			mvwaddch(maze_window, y, x, maze.map[y][x]);
			x++;
			mvwaddch(maze_window, y, x, PLAYER);
		}
		else if(ch == KEY_UP) {
			if(y <= 0) {
				continue;
			}

			mvwaddch(maze_window, y, x, maze.map[y][x]);
			y--;
			mvwaddch(maze_window, y, x, PLAYER);
		}
		else if(ch == KEY_DOWN) {
			if(y >= MAZE_SIZE_HEIGHT - 1) {
				continue;
			}

			mvwaddch(maze_window, y, x, maze.map[y][x]);
			y++;
			mvwaddch(maze_window, y, x, PLAYER);
		}

		wrefresh(maze_window);
	}

	endwin();
}